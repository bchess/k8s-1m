// SPDX-License-Identifier: Apache-2.0
// Copyright 2025 Benjamin Chess

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pod.proto

package podservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PodService_NewPod_FullMethodName       = "/podservice.PodService/NewPod"
	PodService_CollectScore_FullMethodName = "/podservice.PodService/CollectScore"
)

// PodServiceClient is the client API for PodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodServiceClient interface {
	NewPod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewPodRequest, NewPodResponse], error)
	CollectScore(ctx context.Context, in *SchedulingScore, opts ...grpc.CallOption) (*ScheduleResponse, error)
}

type podServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodServiceClient(cc grpc.ClientConnInterface) PodServiceClient {
	return &podServiceClient{cc}
}

func (c *podServiceClient) NewPod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NewPodRequest, NewPodResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PodService_ServiceDesc.Streams[0], PodService_NewPod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewPodRequest, NewPodResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodService_NewPodClient = grpc.BidiStreamingClient[NewPodRequest, NewPodResponse]

func (c *podServiceClient) CollectScore(ctx context.Context, in *SchedulingScore, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, PodService_CollectScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServiceServer is the server API for PodService service.
// All implementations must embed UnimplementedPodServiceServer
// for forward compatibility.
type PodServiceServer interface {
	NewPod(grpc.BidiStreamingServer[NewPodRequest, NewPodResponse]) error
	CollectScore(context.Context, *SchedulingScore) (*ScheduleResponse, error)
	mustEmbedUnimplementedPodServiceServer()
}

// UnimplementedPodServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodServiceServer struct{}

func (UnimplementedPodServiceServer) NewPod(grpc.BidiStreamingServer[NewPodRequest, NewPodResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewPod not implemented")
}
func (UnimplementedPodServiceServer) CollectScore(context.Context, *SchedulingScore) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectScore not implemented")
}
func (UnimplementedPodServiceServer) mustEmbedUnimplementedPodServiceServer() {}
func (UnimplementedPodServiceServer) testEmbeddedByValue()                    {}

// UnsafePodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServiceServer will
// result in compilation errors.
type UnsafePodServiceServer interface {
	mustEmbedUnimplementedPodServiceServer()
}

func RegisterPodServiceServer(s grpc.ServiceRegistrar, srv PodServiceServer) {
	// If the following call pancis, it indicates UnimplementedPodServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PodService_ServiceDesc, srv)
}

func _PodService_NewPod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PodServiceServer).NewPod(&grpc.GenericServerStream[NewPodRequest, NewPodResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodService_NewPodServer = grpc.BidiStreamingServer[NewPodRequest, NewPodResponse]

func _PodService_CollectScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulingScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).CollectScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_CollectScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).CollectScore(ctx, req.(*SchedulingScore))
	}
	return interceptor(ctx, in, info, handler)
}

// PodService_ServiceDesc is the grpc.ServiceDesc for PodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podservice.PodService",
	HandlerType: (*PodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectScore",
			Handler:    _PodService_CollectScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewPod",
			Handler:       _PodService_NewPod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pod.proto",
}
