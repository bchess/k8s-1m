// SPDX-License-Identifier: Apache-2.0
// Copyright 2025 Benjamin Chess

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.12.4
// source: pod.proto

package podservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint32  `protobuf:"fixed32,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Pod       *v1.Pod `protobuf:"bytes,2,opt,name=pod,proto3" json:"pod,omitempty"`
}

func (x *NewPodRequest) Reset() {
	*x = NewPodRequest{}
	mi := &file_pod_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPodRequest) ProtoMessage() {}

func (x *NewPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPodRequest.ProtoReflect.Descriptor instead.
func (*NewPodRequest) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{0}
}

func (x *NewPodRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *NewPodRequest) GetPod() *v1.Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

type NewPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint32 `protobuf:"fixed32,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *NewPodResponse) Reset() {
	*x = NewPodResponse{}
	mi := &file_pod_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPodResponse) ProtoMessage() {}

func (x *NewPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPodResponse.ProtoReflect.Descriptor instead.
func (*NewPodResponse) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{1}
}

func (x *NewPodResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permit bool `protobuf:"varint,1,opt,name=permit,proto3" json:"permit,omitempty"`
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	mi := &file_pod_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduleResponse) GetPermit() bool {
	if x != nil {
		return x.Permit
	}
	return false
}

type SchedulingScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodName   string `protobuf:"bytes,1,opt,name=podName,proto3" json:"podName,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NodeName  string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	Score     int32  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SchedulingScore) Reset() {
	*x = SchedulingScore{}
	mi := &file_pod_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulingScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingScore) ProtoMessage() {}

func (x *SchedulingScore) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingScore.ProtoReflect.Descriptor instead.
func (*SchedulingScore) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{3}
}

func (x *SchedulingScore) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *SchedulingScore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SchedulingScore) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SchedulingScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_pod_proto protoreflect.FileDescriptor

var file_pod_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x6f, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0d, 0x4e,
	0x65, 0x77, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x70,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x64, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x22, 0x7b, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x32, 0x9c, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x6f, 0x64, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x10, 0x5a, 0x0e, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pod_proto_rawDescOnce sync.Once
	file_pod_proto_rawDescData = file_pod_proto_rawDesc
)

func file_pod_proto_rawDescGZIP() []byte {
	file_pod_proto_rawDescOnce.Do(func() {
		file_pod_proto_rawDescData = protoimpl.X.CompressGZIP(file_pod_proto_rawDescData)
	})
	return file_pod_proto_rawDescData
}

var file_pod_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pod_proto_goTypes = []any{
	(*NewPodRequest)(nil),    // 0: podservice.NewPodRequest
	(*NewPodResponse)(nil),   // 1: podservice.NewPodResponse
	(*ScheduleResponse)(nil), // 2: podservice.ScheduleResponse
	(*SchedulingScore)(nil),  // 3: podservice.SchedulingScore
	(*v1.Pod)(nil),           // 4: k8s.io.api.core.v1.Pod
}
var file_pod_proto_depIdxs = []int32{
	4, // 0: podservice.NewPodRequest.pod:type_name -> k8s.io.api.core.v1.Pod
	0, // 1: podservice.PodService.NewPod:input_type -> podservice.NewPodRequest
	3, // 2: podservice.PodService.CollectScore:input_type -> podservice.SchedulingScore
	1, // 3: podservice.PodService.NewPod:output_type -> podservice.NewPodResponse
	2, // 4: podservice.PodService.CollectScore:output_type -> podservice.ScheduleResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pod_proto_init() }
func file_pod_proto_init() {
	if File_pod_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pod_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pod_proto_goTypes,
		DependencyIndexes: file_pod_proto_depIdxs,
		MessageInfos:      file_pod_proto_msgTypes,
	}.Build()
	File_pod_proto = out.File
	file_pod_proto_rawDesc = nil
	file_pod_proto_goTypes = nil
	file_pod_proto_depIdxs = nil
}
